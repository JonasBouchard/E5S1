[gcode_macro PRINT_START]
gcode:

  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("30")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Turn on led_strips
  SET_LED LED="led_strips" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  #  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                        # Clear old saved bed mesh (if any)

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Bed: {target_bed}°C"            # Display info on display
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M190 S{target_bed}                                    # Set the target temp for the bed

  M104 S{target_extruder}                               # Heat hotend to 150c                             

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                       # Display info on display
  BED_MESH_CALIBRATE ADAPTIVE=1                         # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}°C"    # Display info on display
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Clean up the nozzle
  #CLEAN_NOZZLE                                          #Macro to clean the nozzle

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brrrr"             # Display info on display
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z1.2                                               # Raise Z to 1.2
  G91                                                   # Incremental positioning
  G1 X100 E60 F1000                                     # Primeline
  G90                                                   # Absolute position


[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=fan0 SPEED=0
    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    M18

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode: 
    G28 Y                                     # Home Y axis
    #_TOOLHEAD_PARK_PAUSE_CANCEL              # Call _TOOLHEAD_PARK_PAUSE_CANCEL macro
    TURN_OFF_HEATERS                          # Turn off all heaters
    CANCEL_PRINT_BASE                         # Call CANCEL_PRINT_BASE to cancel print
    M107                                      # Turn off part cooling fan
    M18

[gcode_macro LOAD_FILAMENT]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E100 F700          # Move the extruder forward 120mm at a speed of 700mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.

[gcode_macro UNLOAD_FILAMENT]
gcode:
 M83                   # Put the extruder into relative mode
 G92 E0.0              # Reset the extruder so that it thinks it is at position zero
 G1 E-100 F700         # Move the extruder backward 120mm at a speed of 700mm/minute
 G92 E0.0              # Reset the extruder again
 M82                   # Put the extruder back into absolute mode.

[gcode_macro M0]
gcode:
  PAUSE

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

#[gcode_macro M106]
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    SET_FAN_SPEED FAN={fan} SPEED={speed}

#####################################
#        Nozzle Clean Macro         #
#####################################

# Origionally forked from https://github.com/rootiest/zippy-klipper_config/blob/master/extras/CLEAN_NOZZLE.cfg @ v1.5

# Sam's nozzle brush - 1.0
# https://www.printables.com/model/450432
# housing: X150, Y200, Z30
# brush: X180, Y210 -> 220, Z24

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 180
variable_start_y: 220
variable_start_z: 24
variable_end_x: 110
variable_end_y: 110
variable_end_z: 10
variable_end_z_use_current: False ; if True, use current Z position +2 (for safety) as end Z
variable_wipe_axis: 'X' ; wipe side to side
variable_wipe_dist: 30
variable_wipe_qty: 3
variable_wipe_spd: 50
variable_raise_distance: 30
variable_extruder_name: 'extruder'
variable_extruder_temp: 0 # 180
variable_output: 118
variable_pre_hot: True
variable_led_status: False
variable_status_heat: 'STATUS_HEATING'
variable_status_clean: 'STATUS_CLEANING'
variable_ready_status: 'STATUS_READY'
gcode:
    HOME_IF_NEEDED

    # Get the current Z position
    {% set current_z = printer.toolhead.position[2] %}
    {% set nozzle_targ = params.TARGET|default(0)|float %}
    {% set is_hot = params.HOT|default(pre_hot|string) %}
    {% if is_hot|lower == "false" %}
        {% if led_status == True %}
            {status_heat}
        {% endif %}
        M{output} Heating extruder..
        {% if nozzle_targ > 0 %}
            SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET={nozzle_targ}
            TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={nozzle_targ}
        {% elif extruder_temp > 0 %}
            SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET={extruder_temp}
            TEMPERATURE_WAIT SENSOR={extruder_name} MINIMUM={extruder_temp}
        {% endif %}
    {% endif %}
    G90    ; absolute positioning

    ## Raise nozzle
    G1 Z{raise_distance}
    ## Move nozzle to start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500
    # Set lighting
    {% if led_status == True %}
        {status_clean}
    {% endif %}
    ## Wipe nozzle
    RESPOND TYPE=command MSG="Wiping nozzle"
    M{output} Wiping nozzle..
    {% for wipes in range(1, (wipe_qty + 1)) %}
        {% if wipe_axis|lower == 'x' %}
            G1 X{start_x + wipe_dist} F{wipe_spd * 60}
            G1 X{start_x} F{wipe_spd * 60}
        {% elif wipe_axis|lower == 'y' %}
            G1 Y{start_y + wipe_dist} F{wipe_spd * 60}
            G1 Y{start_y} F{wipe_spd * 60}
        {% else %}
            M{output} INVALID WIPE AXIS CONFIGURATION
        {% endif %}
    {% endfor %}

    ## Raise nozzle, then move to end X/Y position
    G1 Z{raise_distance}
    G1 X{end_x} Y{end_y} F6000

    # Set end Z position
    {% if end_z_use_current == True %}
        {% set end_z = current_z + 2 %}
    {% endif %}

    # Move to end Z position
    G1 Z{end_z} F1500

    # Turn off extruder if needed
    {% if is_hot|lower == "false" %}
        M{output} Cooling extruder..
        SET_HEATER_TEMPERATURE HEATER={extruder_name} TARGET=0
    {% endif %}

    # Set lighting
    {% if led_status == True %}
        {status_ready}
    {% endif %}

    M{output} Completed nozzle wipe

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED