# Multi-material unit configuration for dual bowden extruders feeding a single direct drive.
# Each bowden extruder uses a TMC2209 driver on the last two stepper slots of the BTT Octopus v1.1.


#####################################################################
#                             Parameters   
#####################################################################

[gcode_macro _MMU_CFG]
variable_load_len: 100.0
variable_unload_len: 125.0
variable_load_speed: 20.0
variable_unload_speed: 20.0
variable_bowden_len: 700.0
gcode:



#####################################################################
#                             Hardware   
#####################################################################

# First bowden feeder
[extruder_stepper bowden0]
extruder: extruder
step_pin: PE2
dir_pin: !PE3
enable_pin: !PD4
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 22.6789511

[tmc2209 extruder_stepper bowden0]
uart_pin: PE1
run_current: 0.5
hold_current: 0.01



# Second bowden feeder
[extruder_stepper bowden1]
extruder: extruder
step_pin: PE6
dir_pin: !PA14
enable_pin: !PE0
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 22.6789511

[tmc2209 extruder_stepper bowden1]
uart_pin: PD3
run_current: 0.5
hold_current: 0.01

[filament_switch_sensor filament_sensor]
switch_pin: ^SHT36:gpio16
pause_on_runout: False
#insert_gcode:
  #_SP_SENSOR_IN
#runout_gcode:
  #_SP_SENSOR_OUT
event_delay: 0.5
pause_delay: 1.0

#####################################################################
#                             Macros   
#####################################################################

[gcode_macro MMU_SELECT]
# Usage: MMU_SELECT T=<0|1>
variable_active: -1
gcode:
    {% set tool = params.T|int %}
    {% if tool == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden1 MOTION_QUEUE=
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden0 MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=MMU_SELECT VARIABLE=active VALUE=0
    {% elif tool == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden0 MOTION_QUEUE=
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden1 MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=MMU_SELECT VARIABLE=active VALUE=1
    {% else %}
        RESPOND TYPE=error MSG="MMU_SELECT: invalid tool {tool}"
    {% endif %}

# Verifying filament state
[gcode_macro _MMU_VERIFY_INSERTED]
gcode:
    {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %}
        RESPOND TYPE=error MSG="MMU_LOAD: filament not detected in toolhead"
        {% if printer.print_stats.state == "printing" %}
          PAUSE
        {% endif %}
    {% endif %}

[gcode_macro _MMU_VERIFY_REMOVED]
gcode:
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
        RESPOND TYPE=error MSG="MMU_UNLOAD: filament still detected in toolhead"
        {% if printer.print_stats.state == "printing" %}
          PAUSE
        {% endif %}
    {% endif %}


# Loading filament to toolhead
[gcode_macro MMU_LOAD]
gcode:
    {% set L = printer["gcode_macro _MMU_CFG"].load_len|float %}
    {% set S = printer["gcode_macro _MMU_CFG"].load_speed|float %}
    {% set F = (S * 60.0)|int %}
    M83
    G1 E{L} F{F}
    M400
    _MMU_VERIFY_INSERTED
    RESPOND TYPE=echo MSG="MMU_LOAD: L={L} mm @ {S} mm/s"

# Unloading filament from toolhead
[gcode_macro MMU_UNLOAD]
gcode:
    {% set active = printer["gcode_macro MMU_SELECT"].active|int %}
    {% if active == -1 %}
        {action_respond_info("MMU_UNLOAD: no active tool — skipping")}
    {% else %}
        {% set L = printer["gcode_macro _MMU_CFG"].unload_len|float %}
        {% set S = printer["gcode_macro _MMU_CFG"].unload_speed|float %}
        {% set F = (S * 60.0)|int %}
        M83
        G1 E-{L} F{F}
        M400
        _MMU_VERIFY_REMOVED
        RESPOND TYPE=echo MSG="MMU_UNLOAD: L={L} mm @ {S} mm/s"
    {% endif %}

# Loading filament through bowden tube
[gcode_macro MMU_MMU_BOWDEN_LOAD]
# Usage: BOWDEN_LOAD T=<0|1>
gcode:
    {% set tool = params.T|int %}
    {% set L = printer["gcode_macro _MMU_CFG"].bowden_len|float %}
    {% set S = printer["gcode_macro _MMU_CFG"].load_speed|float %}
    {% if tool == 0 %}
        FORCE_MOVE STEPPER=bowden0 DISTANCE={L} VELOCITY={S}
    {% elif tool == 1 %}
        FORCE_MOVE STEPPER=bowden1 DISTANCE={L} VELOCITY={S}
    {% else %}
        RESPOND TYPE=error MSG="MMU_BOWDEN_LOAD: invalid tool {tool}"
    {% endif %}
    RESPOND TYPE=echo MSG="MMU_BOWDEN_LOAD: T{tool} L={L} mm @ {S} mm/s"


# Loading filament from bowden tube
[gcode_macro MMU_BOWDEN_UNLOAD]
# Usage: MMU_BOWDEN_UNLOAD T=<0|1>
gcode:
    {% set tool = params.T|int %}
    {% set L = printer["gcode_macro _MMU_CFG"].bowden_len|float %}
    {% set S = printer["gcode_macro _MMU_CFG"].unload_speed|float %}
    {% if tool == 0 %}
        FORCE_MOVE STEPPER=bowden0 DISTANCE=-{L} VELOCITY={S}
    {% elif tool == 1 %}
        FORCE_MOVE STEPPER=bowden1 DISTANCE=-{L} VELOCITY={S}
    {% else %}
        RESPOND TYPE=error MSG="MMU_BOWDEN_UNLOAD: invalid tool {tool}"
    {% endif %}
    RESPOND TYPE=echo MSG="MMU_BOWDEN_UNLOAD: T{tool} L={L} mm @ {S} mm/s"

[gcode_macro MMU_CHANGE]
# Usage: MMU_CHANGE T=<0|1>
gcode:
    # Parameter validation
    {% set tool = params.T|int if 'T' in params else None %}
    {% if tool is none %}
        {action_raise_error("MMU_CHANGE: missing parameter T (0 or 1)")}
    {% elif tool not in [0,1] %}
        {action_raise_error("MMU_CHANGE: T must be 0 or 1 (received: " ~ params.T ~ ")")}
    {% endif %}

    {% set active = printer["gcode_macro MMU_SELECT"].active|int %}

    # If the requested tool is already active: show message and stop
    {% if tool == active %}
        {action_respond_info("MMU_CHANGE: T" ~ tool ~ " already active — no change performed")}
    {% else %}
        # Otherwise: perform full change sequence
        MMU_UNLOAD
        MMU_SELECT T={tool}
        MMU_LOAD
    {% endif %}



[gcode_macro T0]
gcode:
    MMU_CHANGE T=0

[gcode_macro T1]
gcode:
    MMU_CHANGE T=1