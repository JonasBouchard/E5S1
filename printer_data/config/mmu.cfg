# Multi-material unit configuration for dual bowden extruders feeding a single direct drive.
# Each bowden extruder uses a TMC2209 driver on the last two stepper slots of the BTT Octopus v1.1.


#####################################################################
#                             Parameters   
#####################################################################

[gcode_macro _MMU_CFG]
variable_load_len:    100.0
variable_unload_len:  100.0
variable_load_speed:  10.0
variable_unload_speed:10.0
gcode:



#####################################################################
#                             Hardware   
#####################################################################

# First bowden feeder
[extruder_stepper bowden0]
extruder: extruder
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 7.710843373

[tmc2209 extruder_stepper bowden0]
uart_pin: PE1
run_current: 0.5
hold_current: 0.3
stealthchop_threshold: 0

# Second bowden feeder
[extruder_stepper bowden1]
extruder: extruder
step_pin: PE6
dir_pin: PA14
enable_pin: !PE0
microsteps: 16
full_steps_per_rotation: 200
rotation_distance: 7.710843373

[tmc2209 extruder_stepper bowden1]
uart_pin: PD3
run_current: 0.5
hold_current: 0.3
stealthchop_threshold: 0



#####################################################################
#                             Macros   
#####################################################################

[gcode_macro MMU_SELECT]
# Usage: MMU_SELECT T=<0|1>
variable_active: 0
gcode:
    {% set tool = params.T|int %}
    {% if tool == 0 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden1 MOTION_QUEUE=
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden0 MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=MMU_SELECT VARIABLE=active VALUE=0
    {% elif tool == 1 %}
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden0 MOTION_QUEUE=
        SYNC_EXTRUDER_MOTION EXTRUDER=bowden1 MOTION_QUEUE=extruder
        SET_GCODE_VARIABLE MACRO=MMU_SELECT VARIABLE=active VALUE=1
    {% else %}
        RESPOND TYPE=error MSG="MMU_SELECT: invalid tool {tool}"
    {% endif %}



# Loading filament from toolhead
[gcode_macro MMU_LOAD]
gcode:
    {% set L = printer["gcode_macro _MMU_CFG"].load_len|float %}
    {% set S = printer["gcode_macro _MMU_CFG"].load_speed|float %}
    {% set F = (S * 60.0)|int %}
    M83
    G1 E{L} F{F}
    M82
    RESPOND TYPE=echo MSG="MMU_LOAD: L={L} mm @ {S} mm/s"

# Unloading filament from toolhead
[gcode_macro MMU_UNLOAD]
gcode:
    {% set L = printer["gcode_macro _MMU_CFG"].unload_len|float %}
    {% set S = printer["gcode_macro _MMU_CFG"].unload_speed|float %}
    {% set F = (S * 60.0)|int %}
    M83
    G1 E{-L} F{F}
    M82
    RESPOND TYPE=echo MSG="MMU_UNLOAD: L={L} mm @ {S} mm/s"



[gcode_macro MMU_CHANGE]
# Usage: MMU_CHANGE T=<0|1>
gcode:
    # Parameter validation
    {% set tool = params.T|int if 'T' in params else None %}
    {% if tool is none %}
        {action_raise_error("MMU_CHANGE: missing parameter T (0 or 1)")}
    {% elif tool not in [0,1] %}
        {action_raise_error("MMU_CHANGE: T must be 0 or 1 (received: " ~ params.T ~ ")")}
    {% endif %}

    {% set active = printer["gcode_macro MMU_SELECT"].active|int %}

    # If the requested tool is already active: show message and stop
    {% if tool == active %}
        {action_respond_info("MMU_CHANGE: T" ~ tool ~ " already active â€” no change performed")}
    {% else %}
        # Otherwise: perform full change sequence
        MMU_UNLOAD
        MMU_SELECT T={tool}
        MMU_LOAD
    {% endif %}



[gcode_macro T0]
gcode:
    MMU_CHANGE T=0

[gcode_macro T1]
gcode:
    MMU_CHANGE T=1